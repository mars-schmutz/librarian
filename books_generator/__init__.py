# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

# Print to Info for logging
# self.report({'INFO'}, 'Printing report to Info window.')

bl_info = {
    "name": "Book Generator",
    "author": "Updated by Mersh, originally by Lell, Anfeo",
    "version": (0, 0, 1),
    "blender": (2, 80, 0),
    "location": "3D View",
    "description": "Book Wizard",
    "category": "3D View"
}

import bpy
import bmesh
import random
import bpy.utils.previews
import os
from mathutils import Vector, Matrix
from bpy.props import *
from bpy.types import (Panel,Menu,Operator,PropertyGroup)

from . ui.panels import OBJECT_PT_BooksGenerator
from . ui.panels import OBJECT_PT_BooksList
from . ui.panels import OBJECT_PT_LayoutTest

from . operators.generator import BW_OT_Generate

# Global addon properties
class BWProperties(PropertyGroup):

    # General settings
    initial_gen: BoolProperty(
        name = 'Initial generation',
        description = 'Used to determine whether or not to display the Regenerate button',
        default = False
    )

    gen_seed: IntProperty(
        name = "Seed",
        description = "Input a seed for book generation",
        min = 1,
        max = 2000000000,
        default = 1,
    )

    gen_type: EnumProperty(
        name = "Generation Type",
        items = (
            ("LIBRARY", "Library", "Generate a complete library"),
            ("SINGLE", "Single Shelf", "Generate a single shelf of books"),
        ),
        description = "Determine the arrangement of books generated",
        default = "LIBRARY",
    )

    linked_copies: BoolProperty(
        name = "Linked Copies",
        description = "When active, books will be generated as linked copies of the base mesh",
        default = False,
    )

    books_collection: StringProperty(
        name = "Books Collection",
        description = "Collection of objects to use for book generation",
        default = "None",
    )

    # gen_type: Library settings
    library_gen_type: EnumProperty(
        name = "Library Gen Type",
        items = (
            ("GRID", "Grid", "Generate a library based on rows and columns"),
            ("OBJECT", "Object", "Generate a library based on detected shelves on the active object"),
        ),
        description = "Determine the type of Library generated",
        default = "GRID",
    )

    books_limit: IntProperty(
        name = "Book Limit",
        description = "Maximum amount of books generated by the Library generation type",
        min = 1,
        max = 1000,
        default = 100,
    )

    # Library Grid rows and columns and width of each
    shelf_rows: IntProperty(
        name = "Rows",
        description = "Number of rows for library grid generation",
        min = 0,
        max = 50,
        default = 3,
    )

    shelf_columns: IntProperty(
        name = "Columns",
        description = "Number of columns for library grid generation",
        min = 0,
        max = 50,
        default = 3,
    )

    shelf_row_width: FloatProperty(
        name = "Row Width",
        description = "Width of each row gap for the library grid",
        min = 0,
        max = 50,
        default = 2,
    )

    shelf_column_width: FloatProperty(
        name = "Column Width",
        description = "Width of each column gap for the library grid",
        min = 0,
        max = 50,
        default = 2,
    )

    module_width: FloatProperty(
        name = "Module Width",
        description = "Width of each shelf module",
        min = 0,
        max = 50,
        default = 2
    )

    module_height: FloatProperty(
        name = "Module Height",
        description = "Height of each shelf module",
        min = 0,
        max = 50,
        default = 2
    )

    # Settings for each shelf module
    book_width_fac: FloatProperty(
        name = "Book Width Variation",
        description = "Variably adjust the scaling of the width of the book",
        min = 0,
        max = 1,
        default = 0
    )

    book_height_fac: FloatProperty(
        name = "Book Height Variation",
        description = "Variably adjust the scaling of the height of the book",
        min = 0,
        max = 1,
        default = 0
    )

# Registration
classes = (

    # Properties group
    BWProperties,

    # Operators
    BW_OT_Generate,

    # Panels
    # OBJECT_LayoutTest,
    OBJECT_PT_BooksGenerator,
    OBJECT_PT_BooksList,
)

def register():
    from bpy.utils import register_class
    for c in classes:
        register_class(c)
    
    bpy.types.Scene.booksgen = PointerProperty(type = BWProperties)
    # bpy.types.Scene.bookslist = CollectionProperty(type = BWList)
    bpy.types.Scene.list_index = IntProperty()

def unregister():
    from bpy.utils import unregister_class
    for c in reversed(classes):
        unregister_class(c)
    
    del bpy.types.Scene.booksgen
    del bpy.types.Scene.bookslist
    del bpy.types.Scene.list_index

if __name__ == "__main__":
    register()